import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState } from '../../app/store'
import { fetchRandomText } from './randomTextAPI'

export interface RandomTextState {
  result: string
  status: 'idle' | 'loading' | 'failed'
}

const initialState: RandomTextState = {
  result: '',
  status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addRandomTextAsync = createAsyncThunk(
  'randomtext/fetchRandomText',
  async () => {
    const response = await fetchRandomText()
    // The value we return becomes the `fulfilled` action payload
    return response.very_long_sentence
  }
)

export const textSlice = createSlice({
  name: 'randomtext',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    resetTextArea: (state) => {
      state.result = ''
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addRandomTextAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(addRandomTextAsync.rejected, (state) => {
        state.status = 'idle'
      })
      .addCase(addRandomTextAsync.fulfilled, (state, action) => {
        state.result = action.payload
        state.status = 'idle'
      })
  },
})

export const { resetTextArea } = textSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectText = (state: AppState) => state.random_text.result

export const selectStatus = (state: AppState) => state.random_text.status


export default textSlice.reducer